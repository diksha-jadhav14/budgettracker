generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  accounts      Account[]
  sessions      Session[]
  transactions  Transaction[]
  categories    Category[]
  budgets       Budget[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Category {
  id           String        @id @default(cuid())
  name         String
  icon         String?
  color        String?
  type         TransactionType
  userId       String
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions Transaction[]
  budgets      Budget[]
  
  @@unique([userId, name])
}

model Transaction {
  id          String          @id @default(cuid())
  amount      Float
  description String?
  type        TransactionType
  date        DateTime        @default(now())
  categoryId  String?
  userId      String
  imageUrl    String?
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  
  user        User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  category    Category?       @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  
  @@index([userId])
  @@index([date])
}

enum TransactionType {
  INCOME
  EXPENSE
}

model Budget {
  id         String   @id @default(cuid())
  amount     Float
  month      DateTime
  userId     String
  categoryId String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  
  @@unique([userId, categoryId, month])
  @@index([userId])
  @@index([month])
}
